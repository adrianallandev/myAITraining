{
  "displayName": "Building this React Course App",
  "lessons": [
    {
      "title": "JavaScript Variables",
      "introduction": "JavaScript variables store data like numbers or strings. Learn to use `let`, `const`, and `var` to manage data in your course app.",
      "coreConcept": "Variables hold data; `let` allows reassignment, `const` is fixed, `var` is older.",
      "table": [
        {
          "Concept": "Declare Variables",
          "Code": "let name = 'Adrian';\nconst age = 30;"
        },
        {
          "Concept": "Reassign Variables",
          "Code": "let score = 85;\nscore = 90;"
        }
      ],
      "diagram": "// Save as variables.js\n// Run: node /Users/adrian/Desktop/AI_Expert_Course_App/src/variables.js\nlet name = 'Adrian';\nconst age = 30;\nlet score = 85;\nscore = 90;\nconsole.log('Name:', name); // Adrian\nconsole.log('Age:', age); // 30\nconsole.log('Score:', score); // 90",
      "mcq": {
        "question": "What keyword prevents variable reassignment?",
        "options": ["let", "var", "const", "function"],
        "correctAnswer": "c",
        "explanation": "`const` prevents reassignment, ensuring the variable's value stays fixed."
      },
      "references": [
        {
          "title": "MDN Variables",
          "description": "Guide to JavaScript variables.",
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#variables"
        },
        {
          "title": "Variables Video",
          "description": "Video on JavaScript variables.",
          "url": "https://www.youtube.com/watch?v=9WIJQDvt4Us"
        }
      ]
    },
    {
      "title": "JavaScript Functions",
      "introduction": "Functions are reusable code blocks. Use them in the course app to handle user interactions like submitting answers.",
      "coreConcept": "Functions execute tasks, taking inputs and returning outputs, using declarations or arrow syntax.",
      "table": [
        {
          "Concept": "Function Declaration",
          "Code": "function add(a, b) {\n  return a + b;\n}"
        },
        {
          "Concept": "Arrow Function",
          "Code": "const multiply = (a, b) => a * b;"
        }
      ],
      "diagram": "// Save as functions.js\n// Run: node /Users/adrian/Desktop/AI_Expert_Course_App/src/functions.js\nfunction checkAnswer(selected, correct) {\n  return selected === correct;\n}\nconst logResult = (result) => console.log('Result:', result);\nlogResult(checkAnswer('a', 'a')); // Result: true\nlogResult(checkAnswer('a', 'b')); // Result: false",
      "mcq": {
        "question": "What is an arrow functionâ€™s key feature?",
        "options": ["Loops data", "Concise syntax", "Stores state", "Fetches APIs"],
        "correctAnswer": "b",
        "explanation": "Arrow functions provide a concise syntax and lexical `this` binding."
      },
      "references": [
        {
          "title": "MDN Functions",
          "description": "Guide to JavaScript functions.",
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions"
        },
        {
          "title": "Functions Video",
          "description": "Video on JavaScript functions.",
          "url": "https://www.youtube.com/watch?v=N8ap4k_1QEQ"
        }
      ]
    },
    {
      "title": "JavaScript Arrays and Objects",
      "introduction": "Arrays and objects store multiple values. Use them to manage lesson data in the course app.",
      "coreConcept": "Arrays hold ordered lists; objects store key-value pairs for structured data.",
      "table": [
        {
          "Concept": "Array Methods",
          "Code": "let lessons = ['JS', 'React'];\nlessons.push('Vite');"
        },
        {
          "Concept": "Object Access",
          "Code": "let lesson = { title: 'JS', id: 1 };\nconsole.log(lesson.title);"
        }
      ],
      "diagram": "// Save as data.js\n// Run: node /Users/adrian/Desktop/AI_Expert_Course_App/src/data.js\nlet lessons = [{ title: 'JS', id: 1 }, { title: 'React', id: 2 }];\nlessons.push({ title: 'Vite', id: 3 });\nlet selected = lessons.find(lesson => lesson.id === 1);\nconsole.log('Lessons:', lessons); // [{title: 'JS', id: 1}, ...]\nconsole.log('Selected:', selected.title); // JS",
      "mcq": {
        "question": "How do you add an item to an array?",
        "options": ["array.add()", "array.push()", "array.insert()", "array.append()"],
        "correctAnswer": "b",
        "explanation": "`array.push()` adds an item to the end of an array."
      },
      "references": [
        {
          "title": "MDN Arrays",
          "description": "Guide to JavaScript arrays.",
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"
        },
        {
          "title": "MDN Objects",
          "description": "Guide to JavaScript objects.",
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects"
        }
      ]
    },
    {
      "title": "JavaScript Conditionals and Loops",
      "introduction": "Conditionals and loops control logic flow. Use them in the course app to validate answers or iterate lessons.",
      "coreConcept": "Use `if` for decisions and `for`/`map` for iteration over data.",
      "table": [
        {
          "Concept": "Conditional",
          "Code": "if (score > 80) {\n  return 'Pass';\n} else {\n  return 'Fail';\n}"
        },
        {
          "Concept": "Loop",
          "Code": "let scores = [85, 90];\nscores.forEach(s => console.log(s));"
        }
      ],
      "diagram": "// Save as logic.js\n// Run: node /Users/adrian/Desktop/AI_Expert_Course_App/src/logic.js\nlet answers = ['a', 'b', 'a'];\nlet correct = 'a';\nlet results = answers.map(ans => ans === correct ? 'Correct' : 'Incorrect');\nif (results.every(res => res === 'Correct')) {\n  console.log('All correct!');\n} else {\n  console.log('Results:', results); // ['Correct', 'Incorrect', 'Correct']\n}",
      "mcq": {
        "question": "What does `array.map()` return?",
        "options": ["A number", "A new array", "A string", "Nothing"],
        "correctAnswer": "b",
        "explanation": "`array.map()` returns a new array with transformed elements."
      },
      "references": [
        {
          "title": "MDN Control Flow",
          "description": "Guide to conditionals and loops.",
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling"
        },
        {
          "title": "Loops Video",
          "description": "Video on JavaScript loops.",
          "url": "https://www.youtube.com/watch?v=Kn06785pkJg"
        }
      ]
    },
    {
      "title": "Asynchronous JavaScript",
      "introduction": "Handle asynchronous tasks like API calls in the course app using Promises and async/await.",
      "coreConcept": "Async/await simplifies Promise-based operations for fetching data.",
      "table": [
        {
          "Concept": "Promise",
          "Code": "fetch('https://jsonplaceholder.typicode.com/posts')\n  .then(res => res.json());"
        },
        {
          "Concept": "Async/Await",
          "Code": "async function getData() {\n  const res = await fetch('url');\n  return res.json();\n}"
        }
      ],
      "diagram": "// Save as async.js\n// Run: node /Users/adrian/Desktop/AI_Expert_Course_App/src/async.js\n// Requires: npm install node-fetch\nconst fetch = require('node-fetch');\nasync function fetchLessons() {\n  try {\n    const res = await fetch('https://jsonplaceholder.typicode.com/posts');\n    const data = await res.json();\n    console.log('Posts:', data.slice(0, 1)); // First post\n  } catch (err) {\n    console.error('Error:', err.message);\n  }\n}\nfetchLessons();",
      "mcq": {
        "question": "Where can `await` be used?",
        "options": ["In loops", "In async functions", "In objects", "In arrays"],
        "correctAnswer": "b",
        "explanation": "`await` is used inside async functions to wait for Promises."
      },
      "references": [
        {
          "title": "MDN Async/Await",
          "description": "Guide to asynchronous JavaScript.",
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"
        },
        {
          "title": "Async Video",
          "description": "Video on async JavaScript.",
          "url": "https://www.youtube.com/watch?v=PoRJizFvM7s"
        }
      ]
    },
    {
      "title": "Setting Up Vite and React",
      "introduction": "Start building the course app by setting up a React project with Vite.",
      "coreConcept": "Vite is a fast build tool for creating and running React apps.",
      "table": [
        {
          "Concept": "Create Vite App",
          "Code": "npm create vite@latest my-app -- --template react"
        },
        {
          "Concept": "Run Dev Server",
          "Code": "cd my-app\nnpm install\nnpm run dev"
        }
      ],
      "diagram": "// Run in /Users/adrian/Desktop/AI_Expert_Course_App/\nnpm create vite@latest AI_Expert_Course_App -- --template react\ncd AI_Expert_Course_App\nnpm install\nnpm install react react-dom\nmkdir src/data src/components\necho '{\"displayName\": \"Course\", \"lessons\": []}' > src/data/lessons.json\necho '.container { max-width: 100%; padding: 0.5rem; }' > src/styles.css\nnpm run dev\n// Open http://localhost:5173",
      "mcq": {
        "question": "What does Vite provide?",
        "options": ["State management", "Fast build and dev server", "API fetching", "Styling"],
        "correctAnswer": "b",
        "explanation": "Vite offers a fast build tool and development server for React apps."
      },
      "references": [
        {
          "title": "Vite Guide",
          "description": "Official Vite documentation.",
          "url": "https://vitejs.dev/guide/"
        },
        {
          "title": "Vite Setup Video",
          "description": "Video on Vite with React.",
          "url": "https://www.youtube.com/watch?v=UH5wVoR8zUc"
        }
      ]
    },
    {
      "title": "React Components",
      "introduction": "Build the course appâ€™s UI using React components, reusable pieces of code.",
      "coreConcept": "Components are functions that return JSX to define UI elements.",
      "table": [
        {
          "Concept": "Create Component",
          "Code": "function Header() {\n  return <h1>Course App</h1>;\n}"
        },
        {
          "Concept": "Use Component",
          "Code": "import Header from './Header';\n<Header />"
        }
      ],
      "diagram": "// Save as Header.jsx\n// Create: /Users/adrian/Desktop/AI_Expert_Course_App/src/components/Header.jsx\nimport React from 'react';\nfunction Header() {\n  return (\n    <div className='bg-gray-50 p-2 mb-2'>\n      <h1 className='text-3xl font-bold'>Course App</h1>\n    </div>\n  );\n}\nexport default Header;\n// In App.jsx: import Header from './components/Header'; <Header />",
      "mcq": {
        "question": "What does a React component return?",
        "options": ["A Promise", "JSX", "A string", "An array"],
        "correctAnswer": "b",
        "explanation": "Components return JSX to describe the UI."
      },
      "references": [
        {
          "title": "React Components",
          "description": "Guide to React components.",
          "url": "https://react.dev/learn/your-first-component"
        },
        {
          "title": "Components Video",
          "description": "Video on React components.",
          "url": "https://www.youtube.com/watch?v=Ke90Tje7VS0"
        }
      ]
    },
    {
      "title": "JSX in React",
      "introduction": "Use JSX to write HTML-like code in the course app for clean UI design.",
      "coreConcept": "JSX is a syntax extension for JavaScript, blending HTML with React.",
      "table": [
        {
          "Concept": "JSX Element",
          "Code": "<div className='container'>Hello</div>"
        },
        {
          "Concept": "Dynamic JSX",
          "Code": "<p>{title}</p>"
        }
      ],
      "diagram": "// Save as LessonTitle.jsx\n// Create: /Users/adrian/Desktop/AI_Expert_Course_App/src/components/LessonTitle.jsx\nimport React from 'react';\nfunction LessonTitle({ title }) {\n  return (\n    <div className='bg-off-white p-2 mb-2'>\n      <h1 className='text-3xl font-bold'>{title || 'No Title'}</h1>\n    </div>\n  );\n}\nexport default LessonTitle;\n// In App.jsx: import LessonTitle from './components/LessonTitle'; <LessonTitle title='JS Basics' />",
      "mcq": {
        "question": "What is JSX used for?",
        "options": ["Fetching data", "Writing UI code", "Managing state", "Styling"],
        "correctAnswer": "b",
        "explanation": "JSX describes UI elements in a HTML-like syntax."
      },
      "references": [
        {
          "title": "React JSX",
          "description": "Guide to JSX in React.",
          "url": "https://react.dev/learn/writing-markup-with-jsx"
        },
        {
          "title": "JSX Video",
          "description": "Video on JSX.",
          "url": "https://www.youtube.com/watch?v=7Vo_VhSwq0U"
        }
      ]
    },
    {
      "title": "React State with useState",
      "introduction": "Add interactivity to the course app with useState, like toggling the diagram.",
      "coreConcept": "useState creates state variables and setters to update the UI.",
      "table": [
        {
          "Concept": "Declare State",
          "Code": "const [isOpen, setIsOpen] = useState(false);"
        },
        {
          "Concept": "Update State",
          "Code": "<button onClick={() => setIsOpen(!isOpen)}>Toggle</button>"
        }
      ],
      "diagram": "// Save as DiagramToggle.jsx\n// Create: /Users/adrian/Desktop/AI_Expert_Course_App/src/components/DiagramToggle.jsx\nimport React, { useState } from 'react';\nfunction DiagramToggle() {\n  const [isOpen, setIsOpen] = useState(true);\n  return (\n    <div className='mb-2'>\n      <label className='toggle-switch-label mb-2'>\n        <input\n          type='checkbox'\n          checked={isOpen}\n          onChange={() => setIsOpen(!isOpen)}\n          className='toggle-switch'\n        />\n        <span className='toggle-slider'></span>\n        Show Diagram\n      </label>\n      {isOpen && <div className='bg-gray-800 p-2'>Diagram Content</div>}\n    </div>\n  );\n}\nexport default DiagramToggle;\n// In App.jsx: import DiagramToggle from './components/DiagramToggle'; <DiagramToggle />",
      "mcq": {
        "question": "What triggers a re-render in React?",
        "options": ["New component", "State update", "New prop", "New function"],
        "correctAnswer": "b",
        "explanation": "Updating state with setState triggers a re-render."
      },
      "references": [
        {
          "title": "React useState",
          "description": "Guide to useState hook.",
          "url": "https://react.dev/reference/react/useState"
        },
        {
          "title": "Hooks Video",
          "description": "Video on React hooks.",
          "url": "https://www.youtube.com/watch?v=TNhaISOUy6Q"
        }
      ]
    },
    {
      "title": "React Props",
      "introduction": "Pass data to components in the course app, like lesson titles, using props.",
      "coreConcept": "Props are read-only data passed from parent to child components.",
      "table": [
        {
          "Concept": "Pass Props",
          "Code": "<Lesson title='JS Basics' />"
        },
        {
          "Concept": "Receive Props",
          "Code": "function Lesson({ title }) {\n  return <h1>{title}</h1>;\n}"
        }
      ],
      "diagram": "// Save as Lesson.jsx\n// Create: /Users/adrian/Desktop/AI_Expert_Course_App/src/components/Lesson.jsx\nimport React from 'react';\nfunction Lesson({ title, content }) {\n  return (\n    <div className='bg-gray-50 p-2 mb-2'>\n      <h2 className='text-xl font-semibold'>{title}</h2>\n      <p>{content}</p>\n    </div>\n  );\n}\nexport default Lesson;\n// In App.jsx: import Lesson from './components/Lesson'; <Lesson title='JS Basics' content='Learn variables' />",
      "mcq": {
        "question": "Are props mutable in a child component?",
        "options": ["Yes", "No", "Only strings", "Only objects"],
        "correctAnswer": "b",
        "explanation": "Props are read-only in child components."
      },
      "references": [
        {
          "title": "React Props",
          "description": "Guide to React props.",
          "url": "https://react.dev/learn/passing-props-to-a-component"
        },
        {
          "title": "Props Video",
          "description": "Video on React props.",
          "url": "https://www.youtube.com/watch?v=PHaECbrKgs0"
        }
      ]
    },
    {
      "title": "React Event Handling",
      "introduction": "Handle user interactions in the course app, like selecting MCQ answers.",
      "coreConcept": "Event handlers like onClick and onChange respond to user actions.",
      "table": [
        {
          "Concept": "Click Event",
          "Code": "<button onClick={() => console.log('Clicked')}>Click</button>"
        },
        {
          "Concept": "Change Event",
          "Code": "<input onChange={(e) => setValue(e.target.value)} />"
        }
      ],
      "diagram": "// Save as AnswerSelector.jsx\n// Create: /Users/adrian/Desktop/AI_Expert_Course_App/src/components/AnswerSelector.jsx\nimport React, { useState } from 'react';\nfunction AnswerSelector() {\n  const [selected, setSelected] = useState(null);\n  const options = ['Option A', 'Option B'];\n  return (\n    <div className='container'>\n      {options.map((opt, index) => (\n        <button\n          key={index}\n          className={`p-2 mb-2 w-full ${selected === index ? 'bg-blue-100' : 'bg-white'}`}\n          onClick={() => setSelected(index)}\n        >\n          {opt}\n        </button>\n      ))}\n      <p>Selected: {selected !== null ? options[selected] : 'None'}</p>\n    </div>\n  );\n}\nexport default AnswerSelector;\n// In App.jsx: import AnswerSelector from './components/AnswerSelector'; <AnswerSelector />",
      "mcq": {
        "question": "What triggers an onClick event?",
        "options": ["Input change", "Button click", "Page load", "State update"],
        "correctAnswer": "b",
        "explanation": "onClick triggers when a user clicks an element."
      },
      "references": [
        {
          "title": "React Events",
          "description": "Guide to event handling.",
          "url": "https://react.dev/learn/responding-to-events"
        },
        {
          "title": "Events Video",
          "description": "Video on React events.",
          "url": "https://www.youtube.com/watch?v=8pKjULHzs0s"
        }
      ]
    },
    {
      "title": "Dynamic JSON Loading",
      "introduction": "Load lesson data dynamically in the course app using Viteâ€™s glob import.",
      "coreConcept": "import.meta.glob loads JSON files into a map for dynamic rendering.",
      "table": [
        {
          "Concept": "Glob Import",
          "Code": "const files = import.meta.glob('./data/*.json', { eager: true });"
        },
        {
          "Concept": "Process Files",
          "Code": "const dataMap = {};\nfor (const [path, module] of Object.entries(files)) {\n  dataMap[path.split('/').pop()] = module.default;\n}"
        }
      ],
      "diagram": "// Save as LessonLoader.jsx\n// Create: /Users/adrian/Desktop/AI_Expert_Course_App/src/components/LessonLoader.jsx\n// Create src/data/lessons.json: {\"displayName\": \"Course\", \"lessons\": [{\"title\": \"Test\"}]}\n// Add to src/styles.css: .lesson-item { padding: 0.5rem; border: 1px solid #d1d5db; border-radius: 0.875rem; }\n\nimport React, { useState, useEffect } from 'react';\nfunction LessonLoader() {\n  const [dataMap, setDataMap] = useState({});\n  useEffect(() => {\n    const files = import.meta.glob('./data/*.json', { eager: true });\n    const loadedData = {};\n    for (const [path, module] of Object.entries(files)) {\n      loadedData[path.split('/').pop()] = module.default;\n    }\n    setDataMap(loadedData);\n  }, []);\n  return (\n    <div className='container'>\n      {Object.values(dataMap).map((data, index) => (\n        <p key={index} className='lesson-item'>{data.displayName}</p>\n      ))}\n    </div>\n  );\n}\nexport default LessonLoader;\n// In App.jsx: import LessonLoader from './components/LessonLoader'; <LessonLoader />",
      "mcq": {
        "question": "What does import.meta.glob do?",
        "options": ["Fetches APIs", "Maps files to modules", "Creates components", "Manages state"],
        "correctAnswer": "b",
        "explanation": "import.meta.glob maps file paths to their module contents."
      },
      "references": [
        {
          "title": "Vite Glob Import",
          "description": "Guide to Vite glob imports.",
          "url": "https://vitejs.dev/guide/features.html#glob-import"
        },
        {
          "title": "Dynamic Import Video",
          "description": "Video on dynamic imports.",
          "url": "https://www.youtube.com/watch?v=9jO8zSzS4gQ"
        }
      ]
    },
    {
      "title": "Building the Lesson Selector",
      "introduction": "Create a dropdown to select lessons in the course app, using state and events.",
      "coreConcept": "A dropdown with onChange updates the current lesson dynamically.",
      "table": [
        {
          "Concept": "State for Selection",
          "Code": "const [lessonIndex, setLessonIndex] = useState(0);"
        },
        {
          "Concept": "Handle Change",
          "Code": "<select onChange={(e) => setLessonIndex(Number(e.target.value))}>"
        }
      ],
      "diagram": "// Save as LessonSelector.jsx\n// Create: /Users/adrian/Desktop/AI_Expert_Course_App/src/components/LessonSelector.jsx\n// Add to src/styles.css: .lesson-selector { padding: 0.5rem; border: 2px solid #60a5fa; border-radius: 0.875rem; }\n\nimport React, { useState } from 'react';\nfunction LessonSelector({ lessons }) {\n  const [lessonIndex, setLessonIndex] = useState(0);\n  return (\n    <div className='bg-gray-50 p-2 mb-2'>\n      <select\n        className='lesson-selector'\n        value={lessonIndex}\n        onChange={(e) => setLessonIndex(Number(e.target.value))}\n      >\n        {lessons.map((lesson, index) => (\n          <option key={index} value={index}>{lesson.title}</option>\n        ))}\n      </select>\n      <p className='text-lg mt-2'>Selected: {lessons[lessonIndex]?.title}</p>\n    </div>\n  );\n}\nexport default LessonSelector;\n// In App.jsx: import LessonSelector from './components/LessonSelector'; <LessonSelector lessons={[{title: 'JS'}, {title: 'React'}]} />",
      "mcq": {
        "question": "What updates the dropdownâ€™s value?",
        "options": ["onClick", "onChange", "onSubmit", "onSelect"],
        "correctAnswer": "b",
        "explanation": "onChange updates the dropdownâ€™s selected value."
      },
      "references": [
        {
          "title": "React Forms",
          "description": "Guide to form elements in React.",
          "url": "https://react.dev/reference/react-dom/components/select"
        },
        {
          "title": "Select Video",
          "description": "Video on select elements.",
          "url": "https://www.youtube.com/watch?v=7Vo_VhSwq0U"
        }
      ]
    },
    {
      "title": "Creating the Diagram Toggle",
      "introduction": "Add a toggle switch to show/hide diagrams in the course app, using state and styling.",
      "coreConcept": "A checkbox with state controls visibility; CSS styles enhance usability.",
      "table": [
        {
          "Concept": "Toggle State",
          "Code": "const [isOpen, setIsOpen] = useState(true);"
        },
        {
          "Concept": "Conditional Rendering",
          "Code": "{isOpen && <pre>Diagram</pre>}"
        }
      ],
      "diagram": "// Save as DiagramToggle.jsx\n// Create: /Users/adrian/Desktop/AI_Expert_Course_App/src/components/DiagramToggle.jsx\n// Add to src/styles.css: .toggle-switch-label { display: flex; align-items: center; gap: 0.5rem; font-size: 1rem; color: #111827; }\n// .toggle-switch { width: 48px; height: 24px; background: linear-gradient(135deg, #6b7280, #4b5563); border-radius: 9999px; }\n// .toggle-switch:checked { background: linear-gradient(135deg, #3b82f6, #2563eb); }\n// .toggle-slider { width: 24px; height: 24px; background: #ffffff; border: 1px solid #111827; border-radius: 50%; }\n// .toggle-switch:checked + .toggle-slider { transform: translateX(24px); }\n\nimport React, { useState } from 'react';\nfunction DiagramToggle({ diagram }) {\n  const [isOpen, setIsOpen] = useState(true);\n  return (\n    <div className='mb-2'>\n      <label className='toggle-switch-label mb-2'>\n        <input\n          type='checkbox'\n          checked={isOpen}\n          onChange={() => setIsOpen(!isOpen)}\n          className='toggle-switch'\n        />\n        <span className='toggle-slider'></span>\n        Show Diagram\n      </label>\n      {isOpen && <pre className='bg-gray-800 p-2 text-white'>{diagram}</pre>}\n    </div>\n  );\n}\nexport default DiagramToggle;\n// In App.jsx: import DiagramToggle from './components/DiagramToggle'; <DiagramToggle diagram='Sample diagram' />",
      "mcq": {
        "question": "How is the diagramâ€™s visibility controlled?",
        "options": ["Props", "State", "Functions", "Loops"],
        "correctAnswer": "b",
        "explanation": "State (e.g., isOpen) controls conditional rendering of the diagram."
      },
      "references": [
        {
          "title": "React Conditional Rendering",
          "description": "Guide to conditional rendering.",
          "url": "https://react.dev/learn/conditional-rendering"
        },
        {
          "title": "Toggle Video",
          "description": "Video on toggle switches.",
          "url": "https://www.youtube.com/watch?v=8pKjULHzs0s"
        }
      ]
    },
    {
      "title": "Building the MCQ Component",
      "introduction": "Create an MCQ component for the course app to test user knowledge.",
      "coreConcept": "State tracks selections and submission; conditional rendering shows feedback.",
      "table": [
        {
          "Concept": "Track Selection",
          "Code": "const [selected, setSelected] = useState(null);"
        },
        {
          "Concept": "Flexbox Layout",
          "Code": "<div className='mcq-options flex flex-wrap gap-2'>...</div>"
        }
      ],
      "diagram": "// Save as MCQ.jsx\n// Create: /Users/adrian/Desktop/AI_Expert_Course_App/src/components/MCQ.jsx\n// Add to src/styles.css: .mcq-options { display: flex; flex-wrap: wrap; gap: 0.5rem; }\n// .mcq-option { flex: 1 1 48%; min-width: 120px; padding: 0.5rem; color: #111827; border: 1px solid #d1d5db; border-radius: 0.875rem; }\n// .mcq-option:hover { background: #f3f4f6; }\n// .mcq-option:disabled { opacity: 0.5; cursor: not-allowed; }\n// @media (min-width: 640px) { .mcq-option { flex: 1 1 48%; } }\n// @media (min-width: 1024px) { .mcq-option { flex: 1 1 23%; } }\n\nimport React, { useState } from 'react';\nfunction MCQ({ question, options, correctAnswer }) {\n  const [selected, setSelected] = useState(null);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const handleSubmit = () => {\n    setIsSubmitted(true);\n  };\n  return (\n    <div className='bg-light-gray p-2 mb-2'>\n      <h2 className='text-xl font-semibold'>{question}</h2>\n      <div className='mcq-options flex flex-wrap gap-2 mt-2'>\n        {options.map((opt, index) => (\n          <button\n            key={index}\n            className={`mcq-option ${selected === index ? 'bg-blue-100' : 'bg-white'}`}\n            onClick={() => setSelected(index)}\n            disabled={isSubmitted}\n          >\n            {String.fromCharCode(97 + index)}. {opt}\n          </button>\n        ))}\n      </div>\n      {!isSubmitted && (\n        <button className='nav-button mt-2 w-full' onClick={handleSubmit}>\n          Submit\n        </button>\n      )}\n      {isSubmitted && (\n        <p className={selected === correctAnswer ? 'text-green-600' : 'text-red-600'}>\n          {selected === correctAnswer ? 'Correct!' : 'Incorrect'}\n        </p>\n      )}\n    </div>\n  );\n}\nexport default MCQ;\n// In App.jsx: import MCQ from './components/MCQ'; <MCQ question='Test?' options={['A', 'B', 'C', 'D']} correctAnswer={0} />",
      "mcq": {
        "question": "What manages MCQ answer selection?",
        "options": ["Props", "State", "Functions", "JSX"],
        "correctAnswer": "b",
        "explanation": "State tracks the selected answer and submission status."
      },
      "references": [
        {
          "title": "React State",
          "description": "Guide to managing state.",
          "url": "https://react.dev/learn/managing-state"
        },
        {
          "title": "Interactive Components Video",
          "description": "Video on interactive components.",
          "url": "https://www.youtube.com/watch?v=8pKjULHzs0s"
        }
      ]
    },
    {
      "title": "Controlled Inputs",
      "introduction": "Build a form in the course app to collect user inputs, like a search field.",
      "coreConcept": "Controlled inputs sync input values with React state for dynamic updates.",
      "table": [
        {
          "Concept": "Controlled Input",
          "Code": "<input value={text} onChange={(e) => setText(e.target.value)} />"
        },
        {
          "Concept": "Handle Submit",
          "Code": "<form onSubmit={(e) => { e.preventDefault(); console.log(text); }}>"
        }
      ],
      "diagram": "// Save as SearchForm.jsx\n// Create: /Users/adrian/Desktop/AI_Expert_Course_App/src/components/SearchForm.jsx\n// Add to src/styles.css: .input-field { padding: 0.5rem; border: 2px solid #60a5fa; border-radius: 0.875rem; width: 100%; }\n// .input-field:focus { outline: none; box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.5); }\n\nimport React, { useState } from 'react';\nfunction SearchForm() {\n  const [text, setText] = useState('');\n  return (\n    <form className='bg-gray-50 p-2 mb-2' onSubmit={(e) => { e.preventDefault(); console.log('Search:', text); }}>\n      <input\n        className='input-field'\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n        placeholder='Enter search term'\n      />\n      <button className='nav-button mt-2 w-full' type='submit'>\n        Search\n      </button>\n    </form>\n  );\n}\nexport default SearchForm;\n// In App.jsx: import SearchForm from './components/SearchForm'; <SearchForm />",
      "mcq": {
        "question": "What makes an input 'controlled' in React?",
        "options": ["It uses props", "Its value is tied to state", "It has no state", "It uses refs"],
        "correctAnswer": "b",
        "explanation": "A controlled inputâ€™s value is managed by React state, updated via onChange."
      },
      "references": [
        {
          "title": "React Forms",
          "description": "Guide to controlled inputs in React.",
          "url": "https://react.dev/reference/react-dom/components/input"
        },
        {
          "title": "Forms Video",
          "description": "Video on React forms.",
          "url": "https://www.youtube.com/watch?v=7Vo_VhSwq0U"
        }
      ]
    },
    {
      "title": "Dropdown Layout Enhancement",
      "introduction": "Improve the course appâ€™s usability by placing Training and Lesson dropdowns on separate lines for better readability.",
      "coreConcept": "CSS Flexbox with column direction stacks dropdowns vertically for clarity.",
      "table": [
        {
          "Concept": "Flexbox Column",
          "Code": ".nav-container { display: flex; flex-direction: column; gap: 1rem; }"
        },
        {
          "Concept": "Styled Dropdown",
          "Code": ".training-selector, .lesson-selector { padding: 0.5rem; border: 2px solid #60a5fa; border-radius: 0.875rem; width: 100%; }"
        }
      ],
      "diagram": "// Update src/styles.css\n.nav-container {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  align-items: flex-start;\n}\n.selector-container {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  width: 100%;\n}\n.training-selector, .lesson-selector {\n  background: linear-gradient(135deg, #fafbff 0%, #ffffff 100%);\n  color: #111827;\n  font-size: 1rem;\n  padding: 0.5rem;\n  border: 2px solid #60a5fa;\n  border-radius: 0.875rem;\n  width: 100%;\n  max-width: 20rem;\n}\n// Update src/App.jsx\n<div className='bg-gray-50 p-2 mb-2 nav-container'>\n  <div className='selector-container'>\n    <label htmlFor='training-selector' className='text-lg font-semibold'>Select Training:</label>\n    <select id='training-selector' className='training-selector' value={trainingFile} onChange={(e) => setTrainingFile(e.target.value)}>\n      {trainingFiles.map((file) => (\n        <option key={file} value={file}>{dataMap[file]?.displayName || file}</option>\n      ))}\n    </select>\n  </div>\n  <div className='selector-container'>\n    <label htmlFor='lesson-selector' className='text-lg font-semibold'>Select Lesson:</label>\n    <select id='lesson-selector' className='lesson-selector' value={currentLesson} onChange={(e) => setCurrentLesson(Number(e.target.value))}>\n      {lessonsData?.lessons?.map((lesson, index) => (\n        <option key={index} value={index}>{lesson.title}</option>\n      ))}\n    </select>\n  </div>\n</div>",
      "mcq": {
        "question": "What CSS property stacks dropdowns vertically?",
        "options": ["display: grid", "flex-direction: column", "align-items: center", "justify-content: space-between"],
        "correctAnswer": "b",
        "explanation": "flex-direction: column arranges flex items vertically."
      },
      "references": [
        {
          "title": "MDN Flexbox",
          "description": "Guide to CSS Flexbox.",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout"
        },
        {
          "title": "Flexbox Video",
          "description": "Video on CSS Flexbox.",
          "url": "https://www.youtube.com/watch?v=phWxA89Dy94"
        }
      ]
    },
    {
      "title": "Persisting State with localStorage",
      "introduction": "Persist the selected training file and lesson in the course app using localStorage to maintain state across sessions.",
      "coreConcept": "localStorage stores key-value pairs as strings, persisting data in the browser.",
      "table": [
        {
          "Concept": "Save to localStorage",
          "Code": "localStorage.setItem('currentLesson', lessonIndex);"
        },
        {
          "Concept": "Read from localStorage",
          "Code": "const savedLesson = localStorage.getItem('currentLesson');"
        }
      ],
      "diagram": "// Update src/App.jsx\nimport React, { useState, useEffect } from 'react';\nfunction App() {\n  const [currentLesson, setCurrentLesson] = useState(() => {\n    const savedLesson = localStorage.getItem('currentLesson');\n    return savedLesson && !isNaN(parseInt(savedLesson, 10)) ? parseInt(savedLesson, 10) : 0;\n  });\n  const [trainingFile, setTrainingFile] = useState(() => {\n    const savedFile = localStorage.getItem('trainingFile');\n    return savedFile || 'lessons.json';\n  });\n  useEffect(() => {\n    localStorage.setItem('trainingFile', trainingFile);\n    localStorage.setItem('currentLesson', currentLesson);\n  }, [trainingFile, currentLesson]);\n  const handleStartOver = () => {\n    setTrainingFile('lessons.json');\n    setCurrentLesson(0);\n    localStorage.setItem('trainingFile', 'lessons.json');\n    localStorage.setItem('currentLesson', '0');\n  };\n  return (\n    <div className='container'>\n      <button className='nav-button w-full' onClick={handleStartOver}>Start Over</button>\n      <p>Selected: {trainingFile}, Lesson {currentLesson + 1}</p>\n    </div>\n  );\n}\nexport default App;",
      "mcq": {
        "question": "What does localStorage persist?",
        "options": ["Component props", "Browser data", "Server data", "React state"],
        "correctAnswer": "b",
        "explanation": "localStorage persists key-value pairs in the browser across sessions."
      },
      "references": [
        {
          "title": "MDN localStorage",
          "description": "Guide to localStorage API.",
          "url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"
        },
        {
          "title": "localStorage Video",
          "description": "Video on using localStorage.",
          "url": "https://www.youtube.com/watch?v=AwicscsvGLg"
        }
      ]
    },
    {
      "title": "Handling Race Conditions in React",
      "introduction": "Prevent race conditions in the course app when managing state with useEffect, ensuring training files maintain independent lesson progress.",
      "coreConcept": "Decouple state updates in useEffect hooks to avoid unintended overwrites from concurrent operations.",
      "table": [
        {
          "Concept": "Problematic useEffect",
          "Code": "useEffect(() => {\n  localStorage.setItem('trainingFile', trainingFile);\n  const lessonMap = JSON.parse(localStorage.getItem('lessonHistory') || '{}');\n  lessonMap[trainingFile] = currentLesson;\n  localStorage.setItem('lessonHistory', JSON.stringify(lessonMap));\n}, [trainingFile, currentLesson]);"
        },
        {
          "Concept": "Decoupled useEffect",
          "Code": "useEffect(() => {\n  localStorage.setItem('trainingFile', trainingFile);\n}, [trainingFile]);\nuseEffect(() => {\n  const lessonMap = JSON.parse(localStorage.getItem('lessonHistory') || '{}');\n  lessonMap[trainingFile] = currentLesson;\n  localStorage.setItem('lessonHistory', JSON.stringify(lessonMap));\n}, [currentLesson]);"
        }
      ],
      "diagram": "// Update src/App.jsx to fix race condition\n// Problem: Switching trainingFile (e.g., to lessons.json) saves currentLesson (e.g., 6) before loading saved lesson (e.g., 0), syncing all files to lesson 6\n// Save as App.jsx\n// Path: /Users/adrian/Desktop/AI_Expert_Course_App/src/App.jsx\nimport React, { useState, useEffect } from 'react';\nfunction App() {\n  const [currentLesson, setCurrentLesson] = useState(() => {\n    const savedLessons = localStorage.getItem('lessonHistory');\n    const savedFile = localStorage.getItem('trainingFile') || 'lessons.json';\n    const lessonMap = savedLessons ? JSON.parse(savedLessons) : {};\n    return lessonMap[savedFile] && !isNaN(parseInt(lessonMap[savedFile], 10)) ? parseInt(lessonMap[savedFile], 10) : 0;\n  });\n  const [trainingFile, setTrainingFile] = useState(localStorage.getItem('trainingFile') || 'lessons.json');\n  useEffect(() => {\n    localStorage.setItem('trainingFile', trainingFile);\n  }, [trainingFile]);\n  useEffect(() => {\n    const lessonMap = JSON.parse(localStorage.getItem('lessonHistory') || '{}');\n    lessonMap[trainingFile] = currentLesson;\n    localStorage.setItem('lessonHistory', JSON.stringify(lessonMap));\n  }, [currentLesson]);\n  useEffect(() => {\n    const lessonMap = JSON.parse(localStorage.getItem('lessonHistory') || '{}');\n    const savedLesson = lessonMap[trainingFile];\n    const parsedLesson = parseInt(savedLesson, 10);\n    setCurrentLesson(savedLesson && !isNaN(parsedLesson) ? parsedLesson : 0);\n  }, [trainingFile]);\n  return (\n    <div className='container'>\n      <select value={trainingFile} onChange={(e) => setTrainingFile(e.target.value)}>\n        <option value='lessons.json'>Default Course</option>\n      </select>\n      <select value={currentLesson} onChange={(e) => setCurrentLesson(Number(e.target.value))}>\n        <option value={0}>Lesson 1</option>\n      </select>\n      <p>Selected: {trainingFile}, Lesson {currentLesson + 1}</p>\n    </div>\n  );\n}\nexport default App;\n// localStorage after switching to lessons.json: {'trainingFile': 'lessons.json', 'lessonHistory': {'aiProgramming.json': 6, 'lessons.json': 0}}",
      "mcq": {
        "question": "What causes a race condition in useEffect?",
        "options": ["Single dependency", "Multiple useEffect hooks", "Concurrent state updates", "Missing dependencies"],
        "correctAnswer": "c",
        "explanation": "Concurrent state updates in useEffect can overwrite state if not properly decoupled."
      },
      "references": [
        {
          "title": "React useEffect",
          "description": "Guide to useEffect hook and dependency management.",
          "url": "https://react.dev/reference/react/useEffect"
        },
        {
          "title": "Race Conditions in React",
          "description": "Article on managing race conditions in React apps.",
          "url": "https://maxrozen.com/race-conditions-fetching-data-react"
        }
      ]
    }
  ]
}